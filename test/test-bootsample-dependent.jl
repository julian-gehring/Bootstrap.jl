module TestBootsampleDependent

using Statistics
using Bootstrap
using DependentBootstrap
using Random
using Test
using DataFrames

#The primary test implemented here is to ensure the statistics generated
#by Bootstrap.bootstrap are identical to the statistics generated by
#DependentBootstrap.dbootlevel1.

function local_df_to_vec_test_func(x::DataFrame)::Vector{Float64}
    #If you change the contents of this function then test on DataFrame will fail
    return [ mean(x[:,k]) for k = 1:size(x, 2) ]
end


@testset "Dependent bootstraps" begin
    @test Bootstrap.DependentBootstrapSampling <: Bootstrap.BootstrapSampling
    numresample = 10;
    blocklength = 2;
    methodtupbias = [(StationarySampling(numresample,blocklength),:stationary,-0.09178896729821062),
                     (MovingBlockSampling(numresample,blocklength),:moving,-0.033677652536413416),
                     (CircularBlockSampling(numresample,blocklength),:circular,-0.03855034907102495),
                     (NoOverlapBlockSampling(numresample,blocklength),:nooverlap,-0.061662288880307115)];
    atol = 1e-14
    #Testing a Vector{Float64} input and Float64 output
    x1 = [0.9960305161608586,-0.7212881182263334,-0.34349923950301975,0.9611290799383404,-0.8259196925605968,
          0.6151944356507073,-0.43995051045510575,-1.13295801631931,1.2948258643438737,0.2578453384656824]
    testfunc = std;
    for (methodboot, depsym, biasresult) in methodtupbias
        @test typeof(methodboot) <: Bootstrap.DependentBootstrapSampling
        Random.seed!(1234)
        b1 = bootstrap(testfunc, x1, methodboot)
        @test length(b1.t0) == 1
        @test isapprox(b1.t0[1], testfunc(x1), atol=atol)
        @test b1.statistic == testfunc
        @test b1.sampling == methodboot
        @test b1.data == x1
        Random.seed!(1234)
        s1 = dbootlevel1(x1, numresample=numresample, blocklength=blocklength, bootmethod=depsym, flevel1=testfunc)
        @test length(b1.t1) == 1
        @test length(b1.t1[1]) == length(s1)
        for n = 1:length(s1)
            @test isapprox(b1.t1[1][n], s1[n], atol=atol)
        end
        @test isapprox(bias(b1)[1],biasresult,atol=atol)
    end
    #Testing a DataFrame input and Vector{Float64} output
    Random.seed!(1111)
    x2numcol = 2
    x2 = DataFrame(hcat(x1, x1.^2))
    numresample = 10
    blocklength = 2
    testfunc = local_df_to_vec_test_func
    for (methodboot, depsym, irrelevantvariable) in methodtupbias
        Random.seed!(1234)
        b1 = bootstrap(testfunc, x2, methodboot)
        @test length(b1.t0) == x2numcol
        for k = 1:x2numcol
            @test isapprox(b1.t0[k], mean(x2[:,k]), atol=atol)
        end
        @test b1.statistic == testfunc
        @test b1.sampling == methodboot
        @test b1.data == x2
        Random.seed!(1234)
        s1 = dbootlevel1(x2, numresample=numresample, blocklength=blocklength, bootmethod=depsym, flevel1=testfunc)
        @test length(b1.t1) == x2numcol
        for k = 1:x2numcol
            @test length(b1.t1[k]) == length(s1)
            for n = 1:length(s1)
                @test isapprox(b1.t1[k][n], s1[n][k], atol=atol)
            end
        end
    end
end

end #module
